generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Role {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
    code      Int      @unique @default(2) // 0: admin, 1: brand, 2: user

    User User[]
}

model User {
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updateAt     DateTime @updatedAt
    nickName     String   @db.VarChar(25)
    userName     String
    password     String
    avatar       String   @default("1")
    phoneNumber  String?  @unique
    email        String?  @unique
    accesstoken  String?
    refreshtoken String?
    role_id      Int
    Role         Role     @relation(fields: [role_id], references: [id])

    categoryGameCreate   Category[]             @relation(name: "create")
    categoryGameDelete   Category[]             @relation(name: "Delete")
    GameCreate           Game[]                 @relation(name: "create")
    GameDelete           Game[]                 @relation(name: "delete")
    feedbackUserSend     Feedback[]             @relation(name: "send")
    feedbackBrand        Feedback[]             @relation(name: "brand")
    KeyStore             KeyStore[]
    LoginLog             LoginLog[]
    User_update_category User_update_category[]
    User_update_game     User_update_game[]
    Voucher              Voucher[]
    user_voucher1        user_voucher[]
}

model User_update_category {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    title       String
    category_id Int
    category    Category @relation(fields: [category_id], references: [id])
    user_id     Int
    user        User     @relation(fields: [user_id], references: [id])
}

model User_update_game {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    title     String
    game_id   Int
    game      Game     @relation(fields: [game_id], references: [id])
    user_id   Int
    user      User     @relation(fields: [user_id], references: [id])
}

model Category {
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updateAt     DateTime @updatedAt
    name         String
    status       Boolean
    isPushlished Boolean

    userCreate_id        Int
    create               User?                  @relation(fields: [userCreate_id], references: [id], onDelete: NoAction, onUpdate: NoAction, name: "create")
    userDelete_id        Int?
    delete               User?                  @relation(fields: [userDelete_id], references: [id], onDelete: NoAction, onUpdate: NoAction, name: "Delete")
    category_game        Category_Game[]
    User_update_category User_update_category[]
}

model Game {
    id               Int                @id @default(autoincrement())
    createdAt        DateTime           @default(now())
    updateAt         DateTime           @updatedAt
    name             String             @unique @db.VarChar(30)
    url              String             @unique @db.VarChar(40)
    developer        String
    description      String             @db.VarChar(300)
    status           Int                @default(0) // 0 là hiện lên, 1 là ẩn đi
    userCreate_id    Int
    create           User?              @relation(fields: [userCreate_id], references: [id], name: "create")
    userDelete_id    Int?
    delete           User?              @relation(fields: [userDelete_id], references: [id], name: "delete")
    category_game    Category_Game[]
    feedback         Feedback[]
    User_update_game User_update_game[]
}

model Category_Game {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    category_id Int
    category    Category @relation(fields: [category_id], references: [id])
    game_id     Int
    game        Game     @relation(fields: [game_id], references: [id])
}

model Feedback {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    status      Boolean  @default(false)
    title       String   @db.VarChar(50)
    content     String?  @db.VarChar(3000)
    email       String?
    userSend_id Int
    create      User     @relation(fields: [userSend_id], references: [id], name: "send")
    brand_id    Int
    brand       User     @relation(fields: [brand_id], references: [id], name: "brand")
    game_id     Int
    game        Game     @relation(fields: [game_id], references: [id])
}

model KeyStore {
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updateAt     DateTime @updatedAt
    primaryKey   String
    secondaryKey String
    status       Boolean?
    user_id      Int
    user         User     @relation(fields: [user_id], references: [id])
}

model LoginLog {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    user_id   Int
    user      User     @relation(fields: [user_id], references: [id])
}


model Voucher {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    name      String    @unique
    title     String
    expired   DateTime?
    status    Int       @default(0) // 0 là còn thời gian, 1 là hết hạn
    type      String?
    amount    Int       @default(0)

    userCreate_id Int?
    create        User?          @relation(fields: [userCreate_id], references: [id])
    user_voucher  user_voucher[]
}

model user_voucher {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    title      String
    user_id    Int?
    user       User?    @relation(fields: [user_id], references: [id])
    voucher_id Int?
    voucher    Voucher? @relation(fields: [voucher_id], references: [id])
}
